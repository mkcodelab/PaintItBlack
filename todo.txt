add some weird tools like animated tools:
select rain, click, droplets fell from top of canvas, and it will stain it with color etc.
whole canvas should be animated in requestAnimationFrame

*done
add layersService which will be holding layer stack for all backgrounds, added drawings etc.
it has to keep it in array

*done
add showcase canvas layer on which we will paint "animated" things like "drawed" square or ellipse etc.

*done
add opacity of pencil, just add rgba conversion from hex value, and set alpha to the value from range input

* done merging layers and saving to png file
add merge layers functionality for layers.service
mergeLayers(layer1, layer2) {
get image data from layer1 and layer2
delete layer1 and 2
this . _layers.splice()
then create new context
then add new layer with initialized context
then putImageData from layer1 and layer2
}

*done
saving image: create new context, draw imageData from all layers context consecutively,
 save as png
        <!-- add save options like format, quality -->



add invert color pencil


*done
fix the fullscreen mouse coordinates issue


insinde Layer class add operations array, it will be holding the ctx.imageData
and use it to create undo / redo functionality

*done
rework the layer ui

*done partially
implement the wheel color picker / hsl / rgb etc...

add eyedropper (color picker from active layer (mouse pos, imageData
https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas
))

check how tool in toolbox can be refactored, like pass the drawing function to the tool constructor
and use it later in canvasSvc


*done
generate noise from svg feTurbulence
add svg turbulences etc. to generate backgrounds, noises etc.

for brush softness use shadowBlur
softness = 30
c.shadowColor = "white";
c.shadowOffsetX = 0;
c.shadowOffsetY = 0;
c.shadowBlur = softness;


point draw on mouseup event not on mousedown


*done
add logger service that will be responsible for all warns showed on top of the screen in small alert window

instead of drawing rectangle (rectangle tool) on canvas (animated), just draw div with border color / width from toolbox.data
show on mousedown, hide on mouseup. (drag observable)
draw on canvas on mouseup.

when zooming, we need to subscribe to "zoomEvent" and do the same as for windowResize / projectResize, just recalculate boundingClientRect


add blur in generate via svg feBlur

create svg markup with imageSource based on layer imageData
apply feBlur with binded properties
<feGaussianBlur in="SourceAlpha" stdDeviation="4" result="blur" />
probably we can achieve more sophisticated results using svg filters


OR
quicker approach
*done*
just use CanvasRenderingContext2D.filter
https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter



filters
  //   fixed, just used default values

 //   they cant be applied all every time, maybe we could use some checkbox
  // otherwise all set to 0 will blacken the image (brightness / contrast /grayscale ) settings

  //   maybe something like that:
  // filtersData: FiltersData = {
  //     blur: {active: false, value: 0},
  //     brightness: {active: true, value 120},
  //  }
  //   and later in applyFilters filter only active ones.